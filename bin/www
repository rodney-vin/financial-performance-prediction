#!/usr/bin/env node

/**
 * Module dependencies.
 */
'use strict';

var app = require('../app');
var debug = require('debug')('financialTS-application:server');
var http = require('http');
var log4js = require('../app_server/utils/log4js-log-util');

var logger = log4js.getLogger('server');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '4000');
app.getApp().set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app.getApp());
app.setServer(server);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function () {
  logger.info('Server listening on port ' + port);
});
server.on('error', onError);
server.on('listening', onListening);

var devMode = ('development' === app.getApp().get('env'));

if (devMode) {
  // configure webpack-dev-server
  var webpack = require('webpack');
  var WebpackDevServer = require('webpack-dev-server');
  var config = require('../webpack.config');
  var webpackDevServerPort = port + 10;
  config.entry.app.unshift("webpack-dev-server/client?http://localhost:"+webpackDevServerPort+"/", "webpack/hot/only-dev-server");

  new WebpackDevServer(webpack(config), {
    hot: true,
    historyApiFallback: true,
    publicPath: config.output.publicPath,
    proxy: {
      "*": "http://localhost:" + port
    }
  }).listen(webpackDevServerPort, 'localhost', function (err, result) {
    if (err) {
      logger.error(err);
    }

    logger.info('Listening at localhost (WebpackDevServer):' + webpackDevServerPort);
  });
}

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      logger.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      logger.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  logger.debug('Listening on ' + bind);
}
